#!/usr/bin/env bash

# Функция для автоматического определения сенсорного устройства
detect_touch_device() {
    echo "Searching for touch devices..." >&2

    # Ищем устройства по паттернам, исключая стилус
    local patterns=(
        "/dev/input/by-id/*Touchscreen*event*"
        "/dev/input/by-id/*touch*event*"
    )

    for pattern in "${patterns[@]}"; do
        for device in $pattern; do
            # Исключаем устройства стилуса по имени
            if [[ "$device" != *"mouse"* ]] && \
               [[ "$device" != *"stylus"* ]] && \
               [[ "$device" != *"pen"* ]] && \
               [ -e "$device" ] && [ -r "$device" ]; then
                echo "Found device: $device" >&2
                echo "$device"
                return 0
            fi
        done
    done

    echo "Error: No touch devices found" >&2
    return 1
}

# Обработка аргументов
if [ $# -eq 1 ]; then
    DEVICE="$1"

    # Проверка существования устройства
    if [ ! -e "$DEVICE" ]; then
        echo "Error: Device $DEVICE does not exist"
        exit 1
    fi
    echo "Using specified device: $DEVICE"
elif [ $# -eq 0 ]; then
    echo "Auto-detecting touch device..."
    DEVICE=$(detect_touch_device)
    if [ $? -ne 0 ] || [ -z "$DEVICE" ]; then
        echo "Error: Failed to auto-detect compatible touch device"
        echo "Please specify device manually: $0 <device_path>"
        exit 1
    fi
    echo "Auto-detected compatible device: $DEVICE"
else
    echo "Usage: $0 [device_path]"
    echo "Example: $0 /dev/input/by-id/usb-ELAN_Touchscreen-event-if00"
    echo "If no device specified, will try to auto-detect compatible touch device"
    exit 1
fi

# Проверка доступности устройства
if [ ! -r "$DEVICE" ]; then
    echo "Error: Device $DEVICE is not readable"
    echo "You may need to add your user to input group"
    exit 1
fi

# Функция для завершения всех процессов lisgd
stop_lisgd() {
    pkill -f "lisgd -d $DEVICE" 2>/dev/null
}

# Функция запуска/перезапуска lisgd
start_lisgd() {
    # Завершаем предыдущие экземпляры
    stop_lisgd

    # Небольшая задержка перед перезапуском
    sleep 0.1

    # Запускаем lisgd с новыми параметрами
    echo "Starting lisgd with device: $DEVICE"
    lisgd -d "$DEVICE" -t 10 -T 5 \
        -g "1,RL,R,*,R,niri msg action focus-column-right" \
        -g "1,LR,L,*,R,niri msg action focus-column-left" \
        -g "1,DU,B,*,R,niri msg action open-overview" &

    # Сохраняем PID для возможного использования
    LISGD_PID=$!

    # Проверяем, запустился ли lisgd
    sleep 0.1
    if ! ps -p $LISGD_PID >/dev/null 2>&1; then
        echo "Error: lisgd failed to start. Check device permissions and compatibility."
        exit 1
    fi

    echo "lisgd started successfully with PID: $LISGD_PID"
}

# Завершаем lisgd при выходе из скрипта
cleanup() {
    echo "Stopping lisgd..."
    stop_lisgd
    exit 0
}

trap cleanup EXIT INT TERM

# Первоначальный запуск
start_lisgd

# Мониторинг изменений ориентации
echo "Monitoring orientation changes..."
monitor-sensor 2>/dev/null | awk '/Accelerometer orientation changed:/ { print $NF; fflush(); }' | while read -r line
do
    case "$line" in
        normal|bottom-up|right-up|left-up)
            echo "Orientation changed: $line, restarting lisgd..."
            start_lisgd
            ;;
        *)
            echo "Unknown orientation: $line"
            ;;
    esac
done

# Если monitor-sensor завершился
echo "Error: monitor-sensor terminated. Exiting."
cleanup
